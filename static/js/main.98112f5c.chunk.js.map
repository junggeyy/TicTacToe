{"version":3,"sources":["sounds/tada.mp3","sounds/tile.wav","sounds/draw.wav","sounds/lose.mp3","components/Tile.jsx","components/Strike.jsx","components/Board.jsx","components/GameState.js","components/GameOver.jsx","components/Reset.jsx","components/TicTacToe.jsx","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Tile","_ref","className","value","onClick","React","createElement","concat","Strike","strikeClass","Board","tiles","onTileClick","GameState","playerXwins","playerOwins","draw","inProgress","computerwins","computerLose","GameOver","gameState","Fragment","Reset","onReset","winSound","Audio","winAudio","volume","clickSound","clickAudio","drawSound","drawAudio","loseSound","loseAudio","Player_X","Player_O","winningCombo","combo","checkWinner","setStrikeClass","setGameState","gameMode","tileValue1","tileValue2","tileValue3","every","tile","TicTacToe","setTiles","useState","Array","fill","playerTurn","setPlayerTurn","setGameMode","firstMoveMade","setFirstMoveMade","handleModeSelection","mode","play","computerMove","move","smartMove","findIndex","newTiles","findMove","player","a","b","c","values","filter","v","length","includes","indexOf","corners","i","Math","floor","random","useEffect","some","index","setTimeout","handleReset","href","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.98112f5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tada.9bf439f7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tile.5aac49f9.wav\";","module.exports = __webpack_public_path__ + \"static/media/draw.e4fb02c7.wav\";","module.exports = __webpack_public_path__ + \"static/media/lose.4a54ed97.mp3\";","import React from \"react\";\nfunction Tile({ className, value, onClick }){\n    return <div onClick={ onClick } className ={`tile ${className}`}>{value}</div>;\n}\nexport default Tile;","import React from \"react\";\nfunction Strike({strikeClass}){\n    return(\n       <div className={`strike ${strikeClass}`}></div>\n    );\n    \n}\nexport default Strike;","import React from \"react\";\nimport Tile from \"./Tile\";\nimport Strike from \"./Strike\";\nfunction Board({ tiles, onTileClick, strikeClass }){\n    return (\n        <div className = \"board\">\n            <Tile onClick={()=> onTileClick(0)} value={tiles[0]} className= \"right-border bottom-border\" />\n            <Tile onClick={()=> onTileClick(1)} value={tiles[1]} className= \"right-border bottom-border\" />\n            <Tile onClick={()=> onTileClick(2)} value={tiles[2]} className= \"bottom-border\" />\n            <Tile onClick={()=> onTileClick(3)} value={tiles[3]} className= \"right-border bottom-border\" />\n            <Tile onClick={()=> onTileClick(4)} value={tiles[4]} className= \"right-border bottom-border\" />\n            <Tile onClick={()=> onTileClick(5)} value={tiles[5]} className= \"bottom-border\" />\n            <Tile onClick={()=> onTileClick(6)} value={tiles[6]} className= \"right-border\" />\n            <Tile onClick={()=> onTileClick(7)} value={tiles[7]} className= \"right-border\" />\n            <Tile onClick={()=> onTileClick(8)} value={tiles[8]} />\n            <Strike strikeClass={strikeClass}/>\n\n        </div>\n    );\n}\n\nexport default Board;","const GameState ={\n    playerXwins: 0,\n    playerOwins: 1,\n    draw: 2,\n    inProgress: 3,\n    computerwins: 4,\n    computerLose: 5\n};\n\nexport default GameState;","import React from \"react\";\nimport GameState from \"./GameState\";\nfunction GameOver({ gameState}){\n    switch(gameState){\n        case GameState.inProgress:\n            return <></>;\n\n        case GameState.playerOwins:\n            return <div className=\"game-over\">üèÜ O Wins! üèÜ</div>;\n\n        case GameState.playerXwins:\n            return <div className=\"game-over\">üèÜ X Wins! üèÜ</div>;\n            \n        case GameState.draw:\n            return <div className=\"game-over\">It's a draw!</div>;\n\n        case GameState.computerwins:\n            return <div className=\"game-over\">ü¶æ You lose! ü¶æ</div>;\n\n        case GameState.computerLose:\n            return <div className=\"game-over\">üèÜ You win! üèÜ</div>;\n        \n        default:\n            return <></>;\n\n    }\n}\n\nexport default GameOver;","import React from \"react\";\nfunction Reset({onReset}){\n    return (<button onClick={onReset} className=\"reset-button\">Reset</button>);\n}\n\nexport default Reset;","import React from \"react\";\nimport Board from \"./Board\"\nimport { useState, useEffect } from \"react\";\nimport GameOver from \"./GameOver\";\nimport GameState from \"./GameState\";\nimport Reset from \"./Reset\";\nimport winAudio from \"../sounds/tada.mp3\";\nimport clickAudio from \"../sounds/tile.wav\";\nimport drawAudio from \"../sounds/draw.wav\";\nimport loseAudio from \"../sounds/lose.mp3\";\n\n// audio sounds\nconst winSound = new Audio(winAudio);\nwinSound.volume = 0.2;\nconst clickSound = new Audio(clickAudio);\nclickSound.volume = 0.5;\nconst drawSound = new Audio(drawAudio);\ndrawSound.volume = 0.5;\nconst loseSound = new Audio(loseAudio);\nloseSound.volume = 0.5;\n\n\n// player characters\nconst Player_X = \"X\";\nconst Player_O = \"O\";\n\nconst winningCombo = [\n    // combination of rows\n    {combo:[0,1,2], strikeClass: \"strike-row-1\"},\n    {combo:[3,4,5], strikeClass: \"strike-row-2\"},\n    {combo:[6,7,8], strikeClass: \"strike-row-3\"},\n\n    //combination of columns\n    {combo:[0,3,6], strikeClass: \"strike-column-1\"},\n    {combo:[1,4,7], strikeClass: \"strike-column-2\"},\n    {combo:[2,5,8], strikeClass: \"strike-column-3\"},\n\n    //diagonal combinations\n    {combo:[0,4,8], strikeClass: \"strike-diagonal-1\"},\n    {combo:[2,4,6], strikeClass: \"strike-diagonal-2\"}\n\n];\n\nfunction checkWinner(tiles, setStrikeClass, setGameState, gameMode){\n    for(const {combo, strikeClass} of winningCombo){\n        const tileValue1 = tiles[combo[0]];\n        const tileValue2 = tiles[combo[1]];\n        const tileValue3 = tiles[combo[2]];\n\n        // give the winner, if a combo is found\n        if(tileValue1 !== null && tileValue1 === tileValue2 && tileValue1 === tileValue3){\n            setStrikeClass(strikeClass);\n            if(tileValue1 === Player_X){\n                if(gameMode === \"computer\"){\n                    setGameState(GameState.computerLose);\n                }\n                else{\n                    setGameState(GameState.playerXwins);\n                }\n            }\n            else if(tileValue1 === Player_O){\n                if(gameMode === \"computer\"){\n                    setGameState(GameState.computerwins);\n                }\n                else{\n                    setGameState(GameState.playerOwins);\n                }\n            }\n            return true;\n        }\n    }\n    // if a combo is not found, check if all tiles are filled\n    const tilesFilled = tiles.every((tile) => tile!== null);\n    if(tilesFilled){\n        setGameState(GameState.draw);\n        return true;\n    }\n    return false;  // else indicates no winner yet\n}\n\nfunction TicTacToe(){\n    const [tiles, setTiles] = useState(Array(9).fill(null)); // start with a empty set of tiles\n    const [playerTurn, setPlayerTurn] = useState(Player_X); // always player X starts first\n    const [strikeClass, setStrikeClass]= useState();    // no strike initially\n    const [gameState, setGameState] = useState(GameState.inProgress);   // gameState initialised to in progess\n    const [gameMode, setGameMode] = useState(null); // two player mode or computer mode, initially null\n    const [firstMoveMade, setFirstMoveMade] = useState(false); // first move initialially false for the instruction txt\n\n    // user selects a mode\n    const handleModeSelection = (mode) => {\n        setGameMode(mode);\n        clickSound.play();\n    };\n    \n    // user clicks a tile\n    const handleTileClick = (index) => {\n        // check if game is in progress or if tile is empty, if either false: return\n        if(gameState !== GameState.inProgress || tiles[index] !== null){\n            return;\n        }\n        \n        // else: display XO on selected tile\n        const newTiles = [...tiles];\n        newTiles[index] = playerTurn;\n        setTiles(newTiles);\n        \n        // set first move to true for the instruction txt to vanish\n        if (!firstMoveMade) setFirstMoveMade(true);\n\n        // check for winner before switching turns, if found: return\n        if(checkWinner(newTiles, setStrikeClass, setGameState, gameMode)) return;     \n\n        // two player mode: set character accordingly, else let computer move\n        if (gameMode === \"twoPlayer\") {\n            setPlayerTurn(playerTurn === Player_X ? Player_O : Player_X);\n        }\n        else {\n            setTimeout(() => {\n                    computerMove(newTiles);\n            }, 500);\n        }\n    };\n    \n    // computer's move initialiser, computer is O\n    const computerMove = (tiles) => {\n        let move = smartMove(tiles);\n        if(move === -1){\n            move = tiles.findIndex((tile)=> tile === null);\n        }\n        if(move !== -1){\n            const newTiles = [...tiles];\n            newTiles[move] = Player_O;\n            setTiles(newTiles);\n            // after the move, checks winner, if  none: users turn\n            if (!checkWinner(newTiles, setStrikeClass, setGameState, gameMode)) {\n                setPlayerTurn(Player_X);\n            }\n        }\n    };\n\n    // computer's smart move code \n    const smartMove = (tiles) => {\n        const winningCombo = [\n            [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\n            [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\n            [0, 4, 8], [2, 4, 6]            // Diagonals\n        ];\n    \n        // Find a winning move or block opponent's win\n        const findMove = (player) => {\n            for (let combo of winningCombo) {\n                const [a, b, c] = combo;\n                const values = [tiles[a], tiles[b], tiles[c]];\n                if (values.filter(v => v === player).length === 2 && values.includes(null)) {\n                    return combo[values.indexOf(null)];\n                }\n            }\n            return -1;\n        };\n    \n        // computer tries to find a winning move first\n        let move = findMove(Player_O);\n        if (move !== -1) return move;\n    \n        // computer blocks the player's winning combo\n        move = findMove(Player_X);\n        if (move !== -1) return move;\n    \n        // tries to take the center if available\n        if (tiles[4] === null) return 4;\n    \n        // tries to select an available corner randomly\n        const corners = [0, 2, 6, 8].filter(i => tiles[i] === null);\n        if (corners.length > 0) return corners[Math.floor(Math.random() * corners.length)];\n    \n        // at last, selects an empty tile\n        return tiles.findIndex(tile => tile === null);\n    };\n    \n    // reset button press handle\n    const handleReset = ()=> {\n        setGameState(GameState.inProgress);\n        setTiles(Array(9).fill(null));\n        setPlayerTurn(Player_X);\n        setStrikeClass(null);\n        setGameMode(null);\n        setFirstMoveMade(false);\n        clickSound.play();\n    }\n\n    // for winner checks\n    useEffect(() => {\n        checkWinner(tiles, setStrikeClass, setGameState, gameMode);\n    }, [tiles, gameMode]);\n\n    // sound on click\n    useEffect(()=>{\n        if(tiles.some((tile)=> tile !== null)){\n            clickSound.play();\n        }\n    }, [tiles]);\n\n    //sound on game end\n    useEffect(() => {\n        if(gameState === GameState.draw){\n            drawSound.play();\n        }\n        else if(gameMode === \"computer\" && gameState !== GameState.inProgress){\n            if(gameState === GameState.computerLose){\n                winSound.play();\n            }\n            else{\n                loseSound.play();\n            }\n        }\n        else if(gameState !== GameState.inProgress){\n            winSound.play();\n        }\n        \n    }, [gameState, gameMode]);\n\n    // the game screen displayed on call\n    return (\n        <div className = \"container\">\n            <h1>Tic Tac Toe</h1>\n            {gameMode === null && (\n                <div className=\"modal-overlay\">\n                    <div className=\"modal\">\n                    <h2>Welcome to Tic Tac Toe!</h2>\n                    <p>Select a mode to start playing:</p>\n                    <div className=\"button-group\">\n                        <button onClick={() => handleModeSelection(\"twoPlayer\")}>Two Player</button>\n                        <button onClick={() => handleModeSelection(\"computer\")}>Computer</button>\n                    </div>\n                    <p><i>pssst: can you beat the bot?</i> üòâ</p>\n                    </div>\n                </div>\n            )}\n            {(gameMode && !firstMoveMade ) && (\n                <p className=\"turn-info\">\n                    pssst: <br></br>\n                    {gameMode === \"twoPlayer\" \n                    ? \"Player X goes first!\" \n                    : \"Make the first move!\"}\n                </p>\n            )}\n            <div className=\"game-container\">\n                <Board tiles={tiles} \n                onTileClick={handleTileClick}\n                strikeClass={strikeClass}\n                />\n                <GameOver gameState={gameState} />\n                <Reset onReset ={handleReset} />\n            </div>\n            <div className=\"credit\">¬© <a href=\"https://github.com/junggeyy\">junggeyy</a> 2025</div>\n        </div>\n    );\n}\n\nexport default TicTacToe;\n","import React from \"react\";\nimport \"./App.css\";\nimport TicTacToe from \"./components/TicTacToe\";\n\nfunction App() {\n  return <TicTacToe />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}